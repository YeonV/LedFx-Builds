name: LedFx BuildPipeline UV

on:
  workflow_dispatch:
    inputs:
      fversion:
        description: 'Frontend Version'
        default: '106'
        required: false
      release:
        description: 'Create Release'
        default: 'Yes'
        required: false
        type: choice
        options:
          - 'Yes'
          - 'No'
      macos:
        description: 'MacOS (intel)'
        default: true
        required: false
        type: boolean
      osxarm64:
        description: 'MacOS (silicon)'
        default: true
        required: false
        type: boolean
      ubuntu:
        description: 'Ubuntu'
        default: true
        required: false
        type: boolean
      windows:
        description: 'Windows'
        default: true
        required: false
        type: boolean

jobs:
  createrelease:
    name: ${{ github.event.inputs.release == 'Yes' && 'Create Release' || 'Prepare Frontend' }}
    runs-on: [ubuntu-24.04]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      IS_RELEASE: ${{ github.event.inputs.release == 'Yes' && 'true' || 'false' }}
      BUILD_OSX_ARM64: ${{ github.event.inputs.osxarm64 == 'true' && 'true' || 'false' }}
      BUILD_OSX_X64: ${{ github.event.inputs.macos == 'true' && 'true' || 'false' }}
      BUILD_WIN: ${{ github.event.inputs.windows == 'true' && 'true' || 'false' }}
      BUILD_LINUX: ${{ github.event.inputs.ubuntu == 'true' && 'true' || 'false' }}
      action_state: "2.0"  # Default value

    steps:
      - name: Get latest frontend and prepare matrix
        run: |
          curl -L --max-redirs 10 -o ledfx_frontend_v2.zip "https://github.com/YeonV/LedFx-Frontend-v2/releases/latest/download/ledfx_frontend_v2.zip"

      - name: Save Frontend for publish
        uses: actions/upload-artifact@v4
        with:
          name: ledfx_frontend_v2
          path: ledfx_frontend_v2.zip

      - name: Get Messages
        if: ${{ env.IS_RELEASE == 'true' }}
        run: |
          unzip -p ledfx_frontend_v2.zip ledfx_frontend_v2/messages.md >message.md
          echo "## New LedFx binaries available:

          ### Core:  -- Browser-Based
          ### Client:   -- Desktop-App (needs a running Core)
          ### CC:  -- Desktop-App (Core-integrated)

          ---

          ##  More informations regarding Core, Client and CC:

          <details><summary>expand</summary>

          #### Core
          If you don't know where to start, get this, open an internet browser, go to https://localhost:8888/ and off you go.
          This is the server/backend that takes in audio, does the calculations and outputs blinking lights. Runs in the background on a Windows/Mac/Linux computer. You can then open the frontend in an internet browser, by going to https://localhost:8888/ on the same computer that is running the Core.
          You can also pull up the frontend on your smartphone (or any other computer on the same network) by finding out what local IP your computer running the Core uses (most likely something like this 192.168.1.XXX, or 192.168.0.XXX) and opening a Browser on your smartphone and going to eg. https://192.168.1.123:8888/

          #### Client
          This is a Desktop App that opens the frontend of LedFx in a window on your desktop.
          This app does NOT include the LedFx backend/server and cannot run LedFx by itself without the Core.
          This Client app is useful for connecting to a running Core on your network (or the same machine).

          ### CC (Client + Core = CC)
          This is the Client and Core integrated into one Desktop App.
          This Desktop App opens the Client frontend of LedFx in a window on your desktop AND runs the Core backend/server in the background.
          This is useful for people who want the whole LedFx experience in one nice and tidy package.
          With this, you can still connect to the backend server via a Client or browser.

          </details>

          ---

          ## ⚠️ These builds are not signed  (read this please):

          <details><summary>Mac-Users:</summary>

          #### Infos:
          Reports as damaged, because of unsiged.
          To fix it open Terminal and type in the following (with a SPACE at the end):

          <code>sudo xattr -cr </code>

          Then drag'n'drop the LedFx.app File into the terminal and hit enter -> it should ask for sudo password

          Now you can open the App normally, give microphone and network permission, and you can even drag it into your applications.
          Maybe at some point we might buy an apple dev-license for 99€/year, then the voodoo would not be needed anymore.

          </details>

          <details><summary>Win-Users:</summary>

          #### Infos:
          Reports as unsave, because of unsiged.

          Maybe at some point we might buy a microsoft dev-license

          </details>
          " >> ./messages.md

      - uses: actions/checkout@v4
        if: ${{ env.IS_RELEASE == 'true' }}
        with:
          repository: YeonV/LedFx-Frontend-v2
          ref: main
          path: frontend
          fetch-depth: 0

      - name: Get frontend Changelog
        if: ${{ env.IS_RELEASE == 'true' }}
        run: |
          cd frontend
          echo "
          ### Frontend-Changes:
          <details><summary>Expand</summary>

          " >> ../messages.md
          git log --pretty=format:"+ %s [![by](https://img.shields.io/badge/by-$(echo %an)-blue.svg?logo=github&logoColor=white)](https://github.com/LedFx/LedFx/commit/%h)" $(git describe --tags --abbrev=0 @^)..@ | grep -v -E '(cleanup)' | awk '{ sub(/\[\[!\]\]/, ""); msg = substr($0, 1, index($0, "[!") - 1); if (length(msg) >= 5 && !seen[msg]++) { print $0 } }' | awk '{ while (match($0, /https:\/\/img\.shields\.io\/badge\/by-[^"]*-blue\.svg\?logo=github&logoColor=white/)) { url = substr($0, RSTART, RLENGTH); gsub(" ", "_", url); gsub("-", "_", url); gsub("by_", "by-", url); gsub("_blue", "-blue", url); printf "%s%s", substr($0, 1, RSTART - 1), url; $0 = substr($0, RSTART + RLENGTH) } gsub(" ", "_", $0); print }' >> ../messages.md
          echo "
          </details>

          " >> ../messages.md
          cat ../messages.md

      - uses: actions/checkout@v4
        if: ${{ env.IS_RELEASE == 'true' }}
        with:
          repository: LedFx/LedFx
          ref: main
          path: backend
          fetch-depth: 0

      - name: Get Backend Changelog
        if: ${{ env.IS_RELEASE == 'true' }}
        run: |
          cd backend
          echo "
          ### Backend Changes
          <details><summary>Expand</summary>

          " >> ../messages.md
          git log --pretty=format:"+ %s [![by](https://img.shields.io/badge/by-$(echo %an)-blue.svg?logo=github&logoColor=white)](https://github.com/LedFx/LedFx/commit/%h)" $(git describe --tags --abbrev=0 @^)..@ | grep -v -E '(cleanup)' | awk '{ sub(/\[\[!\]\]/, ""); msg = substr($0, 1, index($0, "[!") - 1); if (length(msg) >= 5 && !seen[msg]++) { print $0 } }' | awk '{ while (match($0, /https:\/\/img\.shields\.io\/badge\/by-[^"]*-blue\.svg\?logo=github&logoColor=white/)) { url = substr($0, RSTART, RLENGTH); gsub(" ", "_", url); gsub("-", "_", url); gsub("by_", "by-", url); gsub("_blue", "-blue", url); printf "%s%s", substr($0, 1, RSTART - 1), url; $0 = substr($0, RSTART + RLENGTH) } gsub(" ", "_", $0); print }' >> ../messages.md
          echo "
          </details>

          " >> ../messages.md
          cat ../messages.md

      - name: Create Release
        if: ${{ env.IS_RELEASE == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.action_state }}.${{ github.event.inputs.fversion }}
          release_name: "Release v${{ env.action_state }}.${{ github.event.inputs.fversion }}"
          body_path: ./messages.md
          draft: false
          prerelease: true

      - name: Trigger Build Android
        continue-on-error: true
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: LedFx BuildPipeline Android
          repo: YeonV/LedFx-Builds
          token: ${{ secrets.GITHUB_TOKEN }}
          inputs: '{ "fversion": "${{ github.event.inputs.fversion}}", "release": "${{ startsWith(github.event.head_commit.message, ''Beta'') && ''No'' || ''Yes'' }}", "upload_url": "${{ steps.create_release.outputs.upload_url }}" }'

      - name: Output Release URL File
        if: ${{ env.IS_RELEASE == 'true' }}
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

      - name: Save Release URL File for publish
        if: ${{ env.IS_RELEASE == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: release_url
          path: release_url.txt

      - name: Check Inputs and Prepare Matrix
        id: set-matrix
        run: |
          echo windows: ${{ env.BUILD_WIN  == 'true' }}
          echo ubuntu: ${{ env.BUILD_LINUX  == 'true' }}
          echo macos: ${{ env.BUILD_OSX_X64  == 'true' }}

          os_list=()
          if [ "${{ env.BUILD_WIN == 'true' }}" = "true" ]; then
            os_list+=('windows-latest')
          fi
          if [ "${{ env.BUILD_LINUX == 'true' }}" = "true" ]; then
            os_list+=('ubuntu-latest')
          fi
          if [ "${{ env.BUILD_OSX_X64 == 'true' }}" = "true" ]; then
            os_list+=('macos-13')
          fi
          if [ "${{ env.BUILD_OSX_ARM64 == 'true' }}" = "true" ]; then
            os_list+=('macos-latest')
          fi

          matrix_json="{\"os\": ["
          for os in "${os_list[@]}"; do
            matrix_json+="\"$os\","
          done
          matrix_json=${matrix_json%?} # remove trailing comma
          matrix_json+="], \"python-version\": [\"3.12\"]}"

          echo "$matrix_json" > matrix.json
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  build:
    needs: createrelease
    continue-on-error: true
    runs-on: ${{ matrix.os }}    
    env:
      IS_RELEASE: ${{ github.event.inputs.release == 'Yes' && 'true' || 'false' }}
      IS_OSX_ARM64: ${{ startsWith(matrix.OS, 'macos-latest') }}
      IS_OSX_X64: ${{ startsWith(matrix.OS, 'macos-13') }}
      IS_WIN: ${{ startsWith(matrix.OS, 'windows') }}
      IS_LINUX: ${{ startsWith(matrix.OS, 'ubuntu') }}
      BUILD_OSX_ARM64: ${{ github.event.inputs.osxarm64 == 'true' && 'true' || 'false' }}
      BUILD_OSX_X64: ${{ github.event.inputs.macos == 'true' && 'true' || 'false' }}
      BUILD_WIN: ${{ github.event.inputs.windows == 'true' && 'true' || 'false' }}
      BUILD_LINUX: ${{ github.event.inputs.ubuntu == 'true' && 'true' || 'false' }}
      BINARY_NAME: "LedFx"  # Default value
      action_state: "2.0"  # Default value
    defaults:
      run:
        shell: bash -x {0}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.createrelease.outputs.matrix)}}
    steps:
      - name: Check out core from GitHub
        uses: actions/checkout@v4
        with:
          repository: LedFx/LedFx
          ref: main
          path: src

      - name: Check out tools from GitHub
        uses: actions/checkout@v4        
        with:
          repository: YeonV/LedFx-Builds
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          path: src2

      - name: Delete old frontend
        uses: JesseTG/rm@2fb8f3b8a0e41fc222e7943b63306c602feb187e
        with:
          path: ./src/ledfx_frontend

      - name: get git version
        run: |
          cp ./src2/tools/cors.patch ./src/cors.patch
          cp ./src2/tools/sentry.patch ./src/sentry.patch
          cd src
          git rev-parse HEAD >> ledfx/git_version
          git apply cors.patch
          git apply sentry.patch
          cd ..

      - name: Get latest frontend
        if : ${{ env.IS_RELEASE == 'true' }}
        run: |
          curl -L --max-redirs 10 -o ledfx_frontend_v2.zip "https://github.com/YeonV/LedFx-Frontend-v2/releases/latest/download/ledfx_frontend_v2.zip"

      - name: Checkout frontend
        if: ${{ env.IS_RELEASE == 'false' }}
        uses: actions/checkout@v4
        with:
          repository: YeonV/LedFx-Frontend-v2
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          path: src3
      - name: Set up Node.js
        if: ${{ env.IS_RELEASE == 'false' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'
      - name: Build frontend
        if: ${{ env.IS_RELEASE == 'false' }}
        run: |
          cd src3
          yarn
          npm version ${{ env.action_state }}.${{ github.event.inputs.fversion }}
          yarn build
          cd ..

      - name: Include new frontend non win
        if: ${{ env.IS_WIN == 'false' && env.IS_RELEASE == 'true' }}
        run: |
          unzip -o -u ledfx_frontend_v2.zip
          cp -rf ./ledfx_frontend_v2 ./src/ledfx_frontend
          ls ./src/ledfx_frontend

      - name: Include new frontend win
        if: ${{ env.IS_WIN == 'true'  && env.IS_RELEASE == 'true' }}
        run: |
          unzip ledfx_frontend_v2.zip
          cp -r ./ledfx_frontend_v2 ./src/ledfx_frontend
          ls ./src/ledfx_frontend

      - name: Include new build frontend 
        if: ${{ env.IS_RELEASE == 'false' }}
        run: |
          cp -r ./src3/build ./src/ledfx_frontend
          ls ./src/ledfx_frontend
      
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "src/uv.lock"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install build dependencies for osx
        if: ${{ env.IS_OSX_X64 == 'true' || env.IS_OSX_ARM64 == 'true' }}
        run: |
          brew install portaudio mbedtls@2

      - name: Setup mbedtls path for osx-arm64
        if: ${{ env.IS_OSX_ARM64 == 'true' || env.IS_OSX_X64 == 'true' }}
        run: |
          echo "/opt/homebrew/opt/mbedtls@2/bin" >> $GITHUB_PATH
          echo "LDFLAGS=-L/opt/homebrew/opt/mbedtls@2/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/opt/homebrew/opt/mbedtls@2/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/opt/homebrew/opt/mbedtls@2/lib/pkgconfig" >> $GITHUB_ENV

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Enable long paths for git on Windows
        if: ${{ env.IS_WIN == 'true' }}
        run: git config --system core.longpaths true

      - name: Update Path for Windows
        if: ${{ env.IS_WIN == 'true' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH
      
      - name: Update Path for non-Windows
        if: ${{ env.IS_WIN == 'false' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install NSIS (installer)
        if: ${{ env.IS_WIN == 'true' && env.BUILD_WIN == 'true' }}
        uses: repolevedavaj/install-nsis@v1.0.1
        with:
          nsis-version: "3.11"

      - name: Bump version
        if: ${{ env.IS_WIN == 'true' || env.IS_LINUX == 'true' }}
        run: |
          sed -i '0,/PROJECT_VERSION = "\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)\(-[a-z0-9]*\)*"/s//PROJECT_VERSION = "\1.\2.${{ github.event.inputs.fversion }}"/' ./src/ledfx/consts.py
          sed -i '0,/version = "\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)\(-[a-z0-9]*\)*"/s//version = "\1.\2.${{ github.event.inputs.fversion }}"/' ./src/pyproject.toml
          new_version=$(sed -n 's/.*PROJECT_VERSION = "\([0-9]*\.[0-9]*\.[0-9]*\(-[a-z0-9]*\)*\)".*/\1/p' ./src/ledfx/consts.py)
          echo "action_state=$new_version" >> $GITHUB_ENV
          BINARY_NAME=LedFx_core-
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: Bump version osx
        if: ${{ env.IS_OSX_X64 == 'true' || env.IS_OSX_ARM64 == 'true' }}
        run: |
          brew install gnu-sed
          cd src
          gsed -i '0,/PROJECT_VERSION = "\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)\(-[a-z0-9]*\)*"/s//PROJECT_VERSION = "\1.\2.${{ github.event.inputs.fversion }}"/' ./ledfx/consts.py
          gsed -i '0,/version = "\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)\(-[a-z0-9]*\)*"/s//version = "\1.\2.${{ github.event.inputs.fversion }}"/' ./pyproject.toml
          new_version=$(gsed -n 's/.*PROJECT_VERSION = "\([0-9]*\.[0-9]*\.[0-9]*\(-[a-z0-9]*\)*\)".*/\1/p' ./ledfx/consts.py)
          echo "action_state=$new_version" >> $GITHUB_ENV
          BINARY_NAME=LedFx_core-
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: Install LedFx
        if: ${{ env.IS_LINUX == 'true' || env.IS_WIN == 'true' }}
        run: |
          cd src
          uv sync --python ${{ matrix.python-version }} --extra hue --dev
          cd ..
      
      - name: Install LedFx osx
        if: ${{ env.IS_OSX_X64 == 'true' || env.IS_OSX_ARM64 == 'true' }}
        run: |
            cd src
            export PATH="/opt/homebrew/opt/mbedtls@2/bin:$PATH"
            export LDFLAGS="-L/opt/homebrew/opt/mbedtls@2/lib"
            export CPPFLAGS="-I/opt/homebrew/opt/mbedtls@2/include"
            export CFLAGS="-Wno-incompatible-function-pointer-types"
            uv sync --python ${{ matrix.python-version }} --extra hue --dev
            cd ..

      - name: Build ${{ env.BINARY_NAME }}${{ env.action_state }} win
        if: ${{ env.IS_WIN == 'true' }}
        run: |
          mv src2/tools/win/win.spec src/win.spec
          cd src
          uv run pyinstaller windows-binary.spec
          rm dist/LedFx/_internal/_sounddevice_data/portaudio-binaries/libportaudio64bit.dll
          mv loopback/libportaudio64bit.dll dist/LedFx/_internal/_sounddevice_data/portaudio-binaries/libportaudio64bit.dll
          cp -r dist/LedFx $BINARY_NAME-v$action_state          
          7z.exe a -tzip $BINARY_NAME-v$action_state--win.zip $BINARY_NAME-v$action_state "-mx5" "-xr!.git" "-xr!.github"
          mkdir installer
          cd installer
          mkdir icons
          cd ..
          mv ../src2/tools/win/ledfx.nsi ../src/installer/ledfx.nsi
          mv ../src2/tools/win/install_icon.ico ../src/installer/icons/install_icon.ico
          mv ../src2/tools/win/uninstall_icon.ico ../src/installer/icons/uninstall_icon.ico
          cd ..


      - name: Create Windows Installer
        if: ${{ env.IS_WIN == 'true' }}
        run: |
          cd src
          cd installer && makensis ledfx.nsi && ls -la && cd ..

      - name: Build ${{ env.BINARY_NAME }}${{ env.action_state }} osx-x64
        if: ${{ env.IS_OSX_X64 == 'true' }}
        run: |
          mv src2/tools/mac/mac.spec src/mac.spec
          cd src
          ls
          uv run pyinstaller mac.spec
          cd dist/ && mkdir LedFx && chmod +x ./LedFx_v2/Contents/MacOS/LedFx_v2 && mkdir -p ./LedFx_v2/Contents/Frameworks/samplerate/_samplerate_data/ && cp -rf ../../src2/tools/mac/libsamplerate-x86-x64.dylib ./LedFx_v2/Contents/Frameworks/samplerate/_samplerate_data/libsamplerate.dylib && mv ./LedFx_v2 ./LedFx/LedFx.app
          cd ..
          rm -rf ./LedFx.app
          mv ./dist/LedFx/LedFx.app ./LedFx.app
          xattr -cr ./LedFx.app
          tar -czf my_files.tar ./LedFx.app

      - name: Build ${{ env.BINARY_NAME }}${{ env.action_state }} osx-arm64
        if: ${{ env.IS_OSX_ARM64 == 'true' }}
        run: |
          mv src2/tools/mac/mac-arm64.spec src/mac.spec
          cd src
          ls
          uv run pyinstaller mac.spec
          cd dist/ && mkdir LedFx && chmod +x ./LedFx_v2/Contents/MacOS/LedFx_v2 && mkdir -p ./LedFx_v2/Contents/Frameworks/samplerate/_samplerate_data/ && cp -rf ../../src2/tools/mac/libsamplerate-arm64.dylib ./LedFx_v2/Contents/Frameworks/samplerate/_samplerate_data/libsamplerate.dylib && mv ./LedFx_v2 ./LedFx/LedFx.app
          cd ..
          rm -rf ./LedFx.app
          mv ./dist/LedFx/LedFx.app ./LedFx.app
          tar -czf my_files.tar ./LedFx.app

      - name: Build ${{ env.BINARY_NAME }}${{ env.action_state }} linux
        if: ${{ env.IS_LINUX == 'true' }}
        run: |
          sudo apt-get update && sudo apt-get install -y \
          gcc libatlas3-base portaudio19-dev
          sudo apt install pulseaudio 
          mv src2/tools/linux/yzlinux.spec src/linux.spec
          cd src
          ls
          uv run pyinstaller linux.spec
          cd dist && mkdir LedFx-linux && mv ./LedFx ./LedFx-linux/LedFx && cd ..
          cd ..
          cd src/dist && ls && tar -czf LedFx_core-v${{ env.action_state }}--linux-x64.tar.gz ./LedFx-linux




          
      - name: Load Release URL File from release job
        if: ${{ env.IS_RELEASE == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        if: ${{ env.IS_RELEASE == 'true' }}
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT

      - name: Load Frontend Build File from release job
        if: ${{ env.IS_WIN == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: ledfx_frontend_v2
          
      - name: Upload Frontend Build to Release
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'true' }}
        id: upload-release-asset-2
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./ledfx_frontend_v2.zip
          asset_name: ledfx_frontend-v${{ env.action_state }}.zip
          asset_content_type: application/zip

      - name: Upload Frontend Build to Workflow
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: ledfx_frontend-v${{ env.action_state }}.zip
          path: ledfx_frontend_v2/ledfx_frontend_v2.zip

      - name: Upload Core Win To Release
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'true' && env.BUILD_WIN == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: src/${{ env.BINARY_NAME }}-v${{ env.action_state }}--win.zip
          asset_name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--win.zip
          asset_content_type: application/zip

      - name: Upload Core Win To Workflow
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'false' && env.BUILD_WIN == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--win.zip
          path: src/${{ env.BINARY_NAME }}-v${{ env.action_state }}--win.zip

      - name: Upload Core Win Setup To Release
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'true' && env.BUILD_WIN == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: src/installer/ledfx-x.x.x--win-setup.exe
          asset_name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--win-setup.exe
          asset_content_type: application/octet-stream

      - name: Upload Core Win Setup To Workflow
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'false' && env.BUILD_WIN == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--win-setup.exe
          path: src/installer/ledfx-x.x.x--win-setup.exe

      - name: Upload Core Osx-arm64 To Release
        if: ${{ env.IS_OSX_ARM64 == 'true' && env.IS_RELEASE == 'true' && env.BUILD_OSX_ARM64 == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: src/my_files.tar
          asset_name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--osx-arm64.zip
          asset_content_type: application/zip

      - name: Upload Core Osx-arm64 to Workflow
        if: ${{env.IS_OSX_ARM64 == 'true' && env.IS_RELEASE == 'false' && env.BUILD_OSX_ARM64 == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--osx-arm64.zip
          path: src/my_files.tar

      - name: Upload Core Osx To Release
        if: ${{env.IS_OSX_X64 == 'true' && env.IS_RELEASE == 'true' && env.BUILD_OSX_X64 == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: src/my_files.tar
          asset_name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--osx-x64.zip
          asset_content_type: application/zip

      - name: Upload Core Osx to Workflow
        if: ${{ env.IS_OSX_X64 == 'true' && env.IS_RELEASE == 'false' && env.BUILD_OSX_X64 == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--osx-x64.zip
          path: src/my_files.tar

      - name: Build ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
        if: ${{ env.IS_WIN == 'true' }}
        run: |
          cp src2/tools/win/yzwin.spec ./src/win-portable.spec
          cd src
          uv run pyinstaller win-portable.spec
          ls dist/
          mv dist/LedFx.exe dist/$BINARY_NAME-v$action_state--win-portable.exe

      - name: Upload Core Linux To Release
        if: ${{ env.IS_LINUX == 'true' && env.IS_RELEASE == 'true' && env.BUILD_LINUX == 'true' }}
        continue-on-error: true
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: src/dist/LedFx_core-v${{ env.action_state }}--linux-x64.tar.gz
          asset_name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--linux-x64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Core Linux To Worflow      
        if: ${{ env.IS_LINUX == 'true' && env.IS_RELEASE == 'false' && env.BUILD_LINUX == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--linux-x64.tar.gz
          path: src/dist/LedFx_core-v${{ env.action_state }}--linux-x64.tar.gz

      - name: Upload Core Win Portable To Release
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'true' && env.BUILD_WIN == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: src\dist\${{ env.BINARY_NAME }}-v${{ env.action_state }}--win-portable.exe
          asset_name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--win-portable.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Core Win Portable To Worflow
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'false' && env.BUILD_WIN == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--win-portable.exe
          path: src\dist\${{ env.BINARY_NAME }}-v${{ env.action_state }}--win-portable.exe

      # CLIENTS
      - uses: actions/checkout@v4
        with:
          repository: YeonV/LedFx-Frontend-v2
          ref: main
          path: frontend

      - name: Move Core-win
        continue-on-error: true
        if: ${{ env.IS_WIN == 'true' && env.BUILD_WIN == 'true' }}
        run: |
          ls ./src
          echo ------------
          ls ./src/LedFx_core--v${{ env.action_state }}
          echo ------------
          ls ./src/dist
          echo ------------           
          cp -r ./src/LedFx_core--v${{ env.action_state }}/ ./frontend/extraResources/LedFx/ &&
          ls ./frontend/extraResources/LedFx

      - name: Move Core-osx
        if: ${{ (env.IS_OSX_X64 == 'true' || env.IS_OSX_ARM64 == 'true') && (env.BUILD_OSX_ARM64 == 'true' || env.BUILD_OSX_X64 == 'true') }}
        continue-on-error: true
        run: |
          cp -r ./src/LedFx.app ./frontend/extraResources/LedFx_core.app
          echo ------------           
          ls ./frontend/extraResources

      - name: Move Core Linux
        if: ${{ env.IS_LINUX == 'true' && env.BUILD_LINUX == 'true' }}
        continue-on-error: true
        run: |
          ls
          cp -r ./src/dist/LedFx-linux/LedFx ./frontend/extraResources/LedFx
          echo ------------           
          ls ./frontend/extraResources

      - name: Set up Node.js
        if: ${{ env.IS_OSX_ARM64 == 'false' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'
          # architecture: ${{ matrix.arch }}

      - name: Set up Node.js osx-arm64
        if: ${{ env.IS_OSX_ARM64 == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          architecture: arm64
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Disable CI checks
        run: echo "CI=false" >> $GITHUB_ENV
      - name: Building Clients
        run: |
          cd frontend && npm config set legacy-peer-deps true && npm remove electron -g && npm remove electron-builder -g && npm i -D electron electron-builder && npm install --force && npm install postcss && npm run distall
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Release URL File from release job
        if: ${{ env.IS_RELEASE == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: release_url

      - name: Upload Win-Portable to Release
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'true' && env.BUILD_WIN == 'true' }}
        id: upload-release-asset-portable
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win-portable.exe
          asset_name: LedFx_client-v${{ env.action_state }}--win-portable.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Win-Portable to Workflow
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'false' && env.BUILD_WIN == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_client-v${{ env.action_state }}--win-portable.exe
          path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win-portable.exe

      - name: Upload Win-Setup to Release
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'true' && env.BUILD_WIN == 'true' }}
        id: upload-release-asset-setup
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win-setup.exe
          asset_name: LedFx_client-v${{ env.action_state }}--win-setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Win-Setup to Workflow
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'false' && env.BUILD_WIN == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_client-v${{ env.action_state }}--win-setup.exe
          path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win-setup.exe

      - name: Upload Win-Zip to Release
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'true' && env.BUILD_WIN == 'true' }}
        id: upload-release-asset-zip
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win.zip
          asset_name: LedFx_client-v${{ env.action_state }}--win.zip
          asset_content_type: application/zip

      - name: Upload Win-Zip to Workflow
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'false' && env.BUILD_WIN == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_client-v${{ env.action_state }}--win.zip
          path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win.zip

      - name: Upload Win-CC to Release
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'true' && env.BUILD_WIN == 'true' }}
        id: upload-release-asset-cc
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--win-setup.exe
          asset_name: LedFx_CC-v${{ env.action_state }}--win-setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Win-CC to Workflow
        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'false' && env.BUILD_WIN == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_CC-v${{ env.action_state }}--win-setup.exe
          path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--win-setup.exe

      - name: Upload OSX-arm64-Client dmg to Release
        if: ${{ env.IS_OSX_ARM64 == 'true' && env.IS_RELEASE == 'true' && env.BUILD_OSX_ARM64 == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-arm64.dmg
          asset_name: LedFx_client-v${{ env.action_state }}--mac-arm64.dmg
          asset_content_type: application/octet-stream

      - name: Upload OSX-arm64-Client dmg to Workflow
        if: ${{ env.IS_OSX_ARM64 == 'true' && env.IS_RELEASE == 'false' && env.BUILD_OSX_ARM64 == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_client-v${{ env.action_state }}--mac-arm64.dmg
          path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-arm64.dmg

      - name: Upload OSX-arm64-Client zip to Release
        if: ${{ env.IS_OSX_ARM64 == 'true' && env.IS_RELEASE == 'true' && env.BUILD_OSX_ARM64 == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-arm64.zip
          asset_name: LedFx_client-v${{ env.action_state }}--mac-arm64.zip
          asset_content_type: application/zip

      - name: Upload OSX-arm64-Client zip to Workflow
        if: ${{ env.IS_OSX_ARM64 == 'true' && env.IS_RELEASE == 'false' && env.BUILD_OSX_ARM64 == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_client-v${{ env.action_state }}--mac-arm64.zip
          path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-arm64.zip

      - name: Upload OSX-arm64-CC dmg to Release
        if: ${{ env.IS_OSX_ARM64 == 'true' && env.IS_RELEASE == 'true' && env.BUILD_OSX_ARM64 == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-arm64.dmg
          asset_name: LedFx_CC-v${{ env.action_state }}--mac-arm64.dmg
          asset_content_type: application/octet-stream

      - name: Upload OSX-arm64-CC dmg to Workflow
        if: ${{ env.IS_OSX_ARM64 == 'true' && env.IS_RELEASE == 'false' && env.BUILD_OSX_ARM64 == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_CC-v${{ env.action_state }}--mac-arm64.dmg
          path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-arm64.dmg

      - name: Upload OSX-arm64-CC zip to Release
        if: ${{ env.IS_OSX_ARM64 == 'true' && env.IS_RELEASE == 'true' && env.BUILD_OSX_ARM64 == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-arm64.zip
          asset_name: LedFx_CC-v${{ env.action_state }}--mac-arm64.zip
          asset_content_type: application/zip

      - name: Upload OSX-arm64-CC zip to Workflow
        if: ${{ env.IS_OSX_ARM64 == 'true' && env.IS_RELEASE == 'false' && env.BUILD_OSX_ARM64 == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_CC-v${{ env.action_state }}--mac-arm64.zip
          path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-arm64.zip

      - name: Upload Linux Client snap to Release
        continue-on-error: true
        if: ${{ env.IS_LINUX == 'true' && env.IS_RELEASE == 'true' && env.BUILD_LINUX == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--linux.snap
          asset_name: LedFx_client-v${{ env.action_state }}--linux-amd64.snap
          asset_content_type: application/octet-stream

      - name: Upload Linux Client snap to Workflow
        continue-on-error: true
        if: ${{ env.IS_LINUX == 'true' && env.IS_RELEASE == 'false' && env.BUILD_LINUX == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_client-v${{ env.action_state }}--linux-amd64.snap
          path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--linux.snap

      - name: Upload Linux Client AppImage to Release
        continue-on-error: true
        if: ${{ env.IS_LINUX == 'true' && env.IS_RELEASE == 'true' && env.BUILD_LINUX == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--linux.AppImage
          asset_name: LedFx_client-v${{ env.action_state }}--linux-amd64.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Linux Client AppImage to Workflow
        continue-on-error: true
        if: ${{ env.IS_LINUX == 'true' && env.IS_RELEASE == 'false' && env.BUILD_LINUX == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_client-v${{ env.action_state }}--linux-amd64.AppImage
          path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--linux.AppImage

      - name: Upload Linux CC snap to Release
        continue-on-error: true
        if: ${{ env.IS_LINUX == 'true' && env.IS_RELEASE == 'true' && env.BUILD_LINUX == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--linux.snap
          asset_name: LedFx_CC-v${{ env.action_state }}--linux-amd64.snap
          asset_content_type: application/octet-stream

      - name: Upload Linux CC snap to Workflow
        continue-on-error: true
        if: ${{ env.IS_LINUX == 'true' && env.IS_RELEASE == 'false' && env.BUILD_LINUX == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_CC-v${{ env.action_state }}--linux-amd64.snap
          path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--linux.snap

      - name: Upload Linux CC AppImage to Release
        continue-on-error: true
        if: ${{ env.IS_LINUX == 'true' && env.IS_RELEASE == 'true' && env.BUILD_LINUX == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--linux.AppImage
          asset_name: LedFx_CC-v${{ env.action_state }}--linux-amd64.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Linux CC AppImage to Workflow
        continue-on-error: true
        if: ${{ env.IS_LINUX == 'true' && env.IS_RELEASE == 'false' && env.BUILD_LINUX == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_CC-v${{ env.action_state }}--linux-amd64.AppImage
          path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--linux.AppImage

      - name: Upload OSX-x64-Client dmg to Release
        if: ${{ env.IS_OSX_X64 == 'true' && env.IS_RELEASE == 'true' && env.BUILD_OSX_X64 == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-x64.dmg
          asset_name: LedFx_client-v${{ env.action_state }}--mac-x64.dmg
          asset_content_type: application/octet-stream

      - name: Upload OSX-x64-Client dmg to Workflow
        if: ${{ env.IS_OSX_X64 == 'true' && env.IS_RELEASE == 'false' && env.BUILD_OSX_X64 == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_client-v${{ env.action_state }}--mac-x64.dmg
          path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-x64.dmg

      - name: Upload OSX-x64-Client zip to Release
        if: ${{ env.IS_OSX_X64 == 'true' && env.IS_RELEASE == 'true' && env.BUILD_OSX_X64 == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-x64.zip
          asset_name: LedFx_client-v${{ env.action_state }}--mac-x64.zip
          asset_content_type: application/zip

      - name: Upload OSX-x64-Client zip to Workflow
        if: ${{ env.IS_OSX_X64 == 'true' && env.IS_RELEASE == 'false' && env.BUILD_OSX_X64 == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_client-v${{ env.action_state }}--mac-x64.zip
          path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-x64.zip

      - name: Upload OSX-x64-CC dmg to Release
        continue-on-error: true
        if: ${{ env.IS_OSX_X64 == 'true' && env.IS_RELEASE == 'true' && env.BUILD_OSX_X64 == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}

          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-x64.dmg
          asset_name: LedFx_CC-v${{ env.action_state }}--mac-x64.dmg
          asset_content_type: application/octet-stream

      - name: Upload OSX-x64-CC dmg to Workflow
        continue-on-error: true
        if: ${{ env.IS_OSX_X64 == 'true' && env.IS_RELEASE == 'false' && env.BUILD_OSX_X64 == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_CC-v${{ env.action_state }}--mac-x64.dmg
          path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-x64.dmg

      - name: Upload OSX-x64-CC zip to Release
        continue-on-error: true
        if: ${{ env.IS_OSX_X64 == 'true' && env.IS_RELEASE == 'true' && env.BUILD_OSX_X64 == 'true' }}
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-x64.zip
          asset_name: LedFx_CC-v${{ env.action_state }}--mac-x64.zip
          asset_content_type: application/zip

      - name: Upload OSX-x64-CC zip to Workflow
        continue-on-error: true
        if: ${{ env.IS_OSX_X64 == 'true' && env.IS_RELEASE == 'false' && env.BUILD_OSX_X64 == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: LedFx_CC-v${{ env.action_state }}--mac-x64.zip
          path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-x64.zip

#      - name: Send Discord Release Post
#        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'true' }}
#        run: |
#          curl -H "Content-Type: application/json" -d '{"content": "**[DOWNLOAD]** https://github.com/YeonV/LedFx-Builds/releases/tag/v${{ env.action_state }}\n\n**[PREVIEW]**       <https://preview.ledfx.app>**Please** do not send messages here. Use the [testing]-Post instead!", "thread_name": "[beta] Release 2.0.${{ github.event.inputs.fversion }}"}' ${{ secrets.DISCORD_RELEASE_WEBHOOK }}
#          curl -H "Content-Type: application/json" -d '{"content": "https://github.com/YeonV/LedFx-Builds/releases/tag/v${{ env.action_state }}", "thread_name": "[testing] Release 2.0.${{ github.event.inputs.fversion }}"}' ${{ secrets.DISCORD_RELEASE_WEBHOOK }}
#
#      - name: Send Discord Beta Post
#        if: ${{ env.IS_WIN == 'true' && env.IS_RELEASE == 'false' }}
#        run: |
#          curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"New Beta-Binaries available\n**DOWNLOAD:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n:regional_indicator_a: LedFx_core-v${{ env.action_state }}--win.zip\n:regional_indicator_b: LedFx_CC-v${{ env.action_state }}--linux-amd64.snap\n:regional_indicator_c: LedFx_CC-v${{ env.action_state }}--mac-arm64.dmg\n:regional_indicator_d: LedFx_CC-v${{ env.action_state }}--mac-arm64.zip\n:regional_indicator_e: LedFx_CC-v${{ env.action_state }}--mac-x64.dmg\n:regional_indicator_f: LedFx_CC-v${{ env.action_state }}--mac-x64.zip\n:regional_indicator_g: LedFx_CC-v${{ env.action_state }}--win-setup.exe\n:regional_indicator_h: LedFx_client-v${{ env.action_state }}--linux-amd64.AppImage\n:regional_indicator_i: LedFx_client-v${{ env.action_state }}--linux-amd64.snap\n:regional_indicator_j: LedFx_client-v${{ env.action_state }}--mac-arm64.dmg\n:regional_indicator_k: LedFx_client-v${{ env.action_state }}--mac-arm64.zip\n:regional_indicator_l: LedFx_client-v${{ env.action_state }}--mac-x64.dmg\n:regional_indicator_m: LedFx_client-v${{ env.action_state }}--mac-x64.zip\n:regional_indicator_o: LedFx_client-v${{ env.action_state }}--win-portable.exe\n:regional_indicator_p: LedFx_client-v${{ env.action_state }}--win-setup.exe\n:regional_indicator_q: LedFx_client-v${{ env.action_state }}--win.zip\n:regional_indicator_r: LedFx_core-v${{ env.action_state }}--linux-x64.tar.gz\n:regional_indicator_s: LedFx_core-v${{ env.action_state }}--osx-arm64.zip\n:regional_indicator_t: LedFx_core-v${{ env.action_state }}--osx-x64.zip\n:regional_indicator_u: LedFx_core-v${{ env.action_state }}--win-portable.exe\n:regional_indicator_v: LedFx_CC-v${{ env.action_state }}--linux-amd64.AppImage\"}" https://discord.com/api/webhooks/1196958406234345522/zSejZjvGh2rWdAIyIp3IL-8W-yXniX4bsXNxHi9Mn6QmlbhCThWPSDYoLT_PO5a2WQAb
#          curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"======================================\n**NOT WORKING**\"}" https://discord.com/api/webhooks/1196958406234345522/zSejZjvGh2rWdAIyIp3IL-8W-yXniX4bsXNxHi9Mn6QmlbhCThWPSDYoLT_PO5a2WQAb
#          curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"======================================\n**WORKING**\"}" https://discord.com/api/webhooks/1196958406234345522/zSejZjvGh2rWdAIyIp3IL-8W-yXniX4bsXNxHi9Mn6QmlbhCThWPSDYoLT_PO5a2WQAb


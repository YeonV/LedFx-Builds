name: Build LedFx

on: 
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      fversion:
       description: 'Frontend Version'
       default: 'beta48'
       required: false
      core:
       type: boolean
       description: 'Build Core'
       default: true
       required: false
      client:
       type: boolean
       description: 'Build Client'
       default: true
       required: false
       
jobs:
  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:    
    - name: Get latest frontend
      run: |
        curl -L --max-redirs 10 -o ledfx_frontend_v2.zip "https://github.com/YeonV/LedFx-Frontend-v2/releases/latest/download/ledfx_frontend_v2.zip"
    - name: Save Frontend for publish
      uses: actions/upload-artifact@v1
      with:
        name: ledfx_frontend_v2
        path: ledfx_frontend_v2.zip     
    - name: Get Messages
      run: |
        unzip -p ledfx_frontend_v2.zip ledfx_frontend_v2/messages.md >messages.md
    - uses: actions/checkout@v2
      with:
        repository: LedFx/LedFx
        ref: main
        path: backend
    - name: Get Backendver
      id: getbackendver
      run: |
        cd backend/ledfx        
        echo "::set-output name=bversion::$(python consts.py | cut -d- -f1)"
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.getbackendver.outputs.bversion }}--${{ github.event.inputs.fversion }}
        release_name: Release v${{ steps.getbackendver.outputs.bversion }}--${{ github.event.inputs.fversion }}
        body_path: ./messages.md
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
        
  core:
    name: Build Core ${{ matrix.os }}    
    needs: createrelease
    if: ${{ github.event.inputs.core == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            TARGET: ubuntu
            CMD_DEP: |
                sudo apt install libatlas3-base \
                  libavformat58 \
                  portaudio19-dev \
                  pulseaudio                
                cp src2/tools/linux/yzlinux.spec src/linux.spec
                cd src
                pip install -r requirements-dev.txt
                pip install -e .    
                python setup.py develop                  
            CMD_BUILD: >
                cd src && pyinstaller linux.spec
            CMD_PACK: cd src && cd dist && mkdir LedFx-linux && mv ./LedFx ./LedFx-linux/LedFx && zip -r LedFx_core-${{ github.event.inputs.fversion }}--linux-x64.zip ./LedFx-linux && mv LedFx_core-${{ github.event.inputs.fversion }}--linux-x64.zip ../../
            OUT_FILE_NAME: LedFx_core-${{ github.event.inputs.fversion }}--linux-x64.zip
            ASSET_MIME: application/zip
          - os: macos-latest
            TARGET: macos
            CMD_DEP: |
                brew install portaudio pulseaudio
                python -m pip install --upgrade pip
                python -m pip install --upgrade wheel
                cp src2/tools/mac/mac.spec src/mac.spec
                cd src 
                pip install -r requirements-dev.txt
                pip install -e .
                python setup.py develop      
            CMD_BUILD: >
                cd src && pyinstaller mac.spec &&
                cd dist/ && mkdir LedFx && chmod +x ./LedFx_v2/Contents/MacOS/LedFx_v2 && mv ./LedFx_v2 ./LedFx/LedFx.app && cd .. &&
                cp ../src2/tools/mac/mac-notray.md ./ledfx/__main__.py && pyinstaller mac.spec &&
                cd dist/ && mkdir LedFxC && chmod +x ./LedFx_v2/Contents/MacOS/LedFx_v2 && mv ./LedFx_v2 ./LedFxC/LedFx-notray.app
            CMD_PACK: ls # && zip -r LedFx_core-${{ github.event.inputs.fversion }}--mac-x64 . -i ./src/dist/LedFx && ls && cd src && ls
            OUT_FILE_NAME: LedFx_core-${{ github.event.inputs.fversion }}--mac-x64.zip
            ASSET_MIME: application/zip
             
          - os: windows-latest
            TARGET: windows
            CMD_DEP: |
              python -m pip install --upgrade pip
              python -m pip install --upgrade wheel              
              cp src2/tools/win/yzwin.spec src/yzwin.spec
              cp src2/tools/win/yzwin-notray.spec src/yzwin-notray.spec
              cd src 
              python -m pip install pywin32
              python C:\hostedtoolcache\windows\Python\3.9.1\x64\Scripts\pywin32_postinstall.py -install
              # pip install https://download.lfd.uci.edu/pythonlibs/w4tscw6k/PyAudio-0.2.11-cp39-cp39-win_amd64.whl
              pip install --upgrade git+https://github.com/Digital-Sapphire/PyUpdater.git@master
              pip install pystray==0.17
              pip install typing-extensions
              python setup.py develop
              del c:\hostedtoolcache\windows\python\3.9.13\x64\lib\site-packages\sounddevice-0.4.4-py3.9-win-amd64.egg\_sounddevice_data\portaudio-binaries\libportaudio64bit.dll
              cp ../src2/tools/win/libportaudio64bit.dll c:\hostedtoolcache\windows\python\3.9.13\x64\lib\site-packages\sounddevice-0.4.4-py3.9-win-amd64.egg\_sounddevice_data\portaudio-binaries\
              cd ..
            CMD_BUILD: cd src && pyinstaller win.spec && pyinstaller yzwin.spec && mv ./dist/LedFx.exe ../LedFx_core-${{ github.event.inputs.fversion }}--win-portable.exe && cp ../src2/tools/win/win-notray.md ./ledfx/__main__.py && pyinstaller yzwin-notray.spec && mv ./dist/LedFx-notray.exe ../LedFx-notray--win.exe
            CMD_PACK: 7z.exe a -tzip LedFx_core-${{ github.event.inputs.fversion }}--win.zip ./src/dist/LedFx "-mx5" "-xr!.git" "-xr!.github"
            OUT_FILE_NAME: LedFx_core-${{ github.event.inputs.fversion }}--win.zip
            # ASSET_MIME: application/vnd.microsoft.portable-executable
            ASSET_MIME: application/zip
    steps:
    - uses: actions/checkout@v2
      with:
        repository: LedFx/LedFx
        ref: main
        path: src
    - uses: actions/checkout@v2
      with:
        repository: YeonV/LedFx-Builds
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main
        path: src2
    - name: Delete old frontend
      uses: JesseTG/rm@v1.0.3
      with:
        path: ./src/ledfx_frontend
    - name: get git version
      run: |        
        cd src
        git rev-parse HEAD >> ledfx/git_version          
    - name: Load Frontend from release job
      uses: actions/download-artifact@v1
      with:
        name: ledfx_frontend_v2
    - name: Include new frontend
      run: |
        # 7z x ledfx_frontend_v2.zip
        cp -r ./ledfx_frontend_v2 ./src/ledfx_frontend
        ls ./src/ledfx_frontend
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9  
    - name: Get Backendver
      id: getbackendver
      run: |
        cd src/ledfx        
        echo "::set-output name=bversion::$(python consts.py)"
      
    - name: Install dependencies
      run: ${{matrix.CMD_DEP}}        
    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}      
    #- name: Delete .lib from numpy
    #  run: |
    #    Remove-Item -path ./src/dist/LedFx/numpy/.libs -recurse -force -ErrorAction Ignore    
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
    - name: Pack app
      run: ${{matrix.CMD_PACK}}
    - uses: vimtor/action-zip@v1
      if: "startsWith(matrix.OS, 'mac')"      
      with:
        files: ./src/dist/LedFx/
        dest: ${{ matrix.OUT_FILE_NAME}}
    - uses: vimtor/action-zip@v1
      if: "startsWith(matrix.OS, 'mac')"      
      with:
        files: ./src/dist/LedFxC/
        dest: LedFx-notray--mac-x64.zip

    - name: Upload Frontend Build as Asset
      if: "startsWith(matrix.OS, 'win')"
      id: upload-release-asset-2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ledfx_frontend_v2/ledfx_frontend_v2.zip
        asset_name: ledfx_frontend-${{ github.event.inputs.fversion }}.zip
        asset_content_type: ${{ matrix.ASSET_MIME}}
    - name: Upload Zip as Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}
    - name: Upload Win-Portable as Asset      
      if: "startsWith(matrix.OS, 'win')"
      id: upload-release-asset-portable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./LedFx_core-${{ github.event.inputs.fversion }}--win-portable.exe 
        asset_name: LedFx_core-${{ github.event.inputs.fversion }}--win-portable.exe 
        asset_content_type: application/vnd.microsoft.portable-executable
    - name: Upload Win-Notray as Asset      
      if: "startsWith(matrix.OS, 'win')"
      id: upload-release-asset-notray
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./LedFx-notray--win.exe 
        asset_name: LedFx-notray--win.exe 
        asset_content_type: application/vnd.microsoft.portable-executable
    - name: Save Win-Notray for CC
      if: "startsWith(matrix.OS, 'win')"
      uses: actions/upload-artifact@v1
      with:
        name: LedFx-notray--win
        path: ./LedFx-notray--win.exe   
    - name: Upload Mac-Notray as Asset      
      if: "startsWith(matrix.OS, 'mac')"
      id: upload-release-asset-notray-mac
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./LedFx-notray--mac-x64.zip 
        asset_name: LedFx-notray--mac-x64.zip 
        asset_content_type: application/zip
    - name: Save Mac-Notray for CC
      if: "startsWith(matrix.OS, 'mac')"
      uses: actions/upload-artifact@v1
      with:
        name: LedFx-notray--mac-x64
        path: ./LedFx-notray--mac-x64.zip         
        
        
  client:
    name: Build Client ${{ matrix.os }}    
    needs: core
    if: ${{ github.event.inputs.client == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos
            CMD_DEP: |
                echo YZ
            CMD_BUILD: >
                echo YZ
            CMD_PACK: echo YZ
            OUT_FILE_NAME: LedFx_core-${{ github.event.inputs.fversion }}--mac-x64.zip
            ASSET_MIME: application/zip
             
          - os: windows-latest
            TARGET: windows
            CMD_DEP: |
              echo YZ
            CMD_BUILD: echo YZ
            CMD_PACK: echo YZ
            OUT_FILE_NAME: LedFx_core-${{ github.event.inputs.fversion }}--win.zip
            ASSET_MIME: application/zip
            
          - os: ubuntu-latest
            TARGET: ubuntu
            CMD_DEP: |
              echo YZ
            CMD_BUILD: echo YZ
            CMD_PACK: echo YZ
            OUT_FILE_NAME: LedFx_core-${{ github.event.inputs.fversion }}--x64.AppImage
            ASSET_MIME: application/zip            
            
    steps:
    - uses: actions/checkout@v2
      with:
        repository: YeonV/LedFx-Frontend-v2
        ref: main
        path: frontend
    - name: Building Clients
      run: |
         cd frontend && npm install --force && npm run distall
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
    - name: Load Core from previous job win    
      if: "startsWith(matrix.OS, 'win')"
      uses: actions/download-artifact@v1
      with:
        name: LedFx-notray--win
    - name: Load Core from previous job mac
      if: "startsWith(matrix.OS, 'mac')"
      uses: actions/download-artifact@v1
      with:
        name: LedFx-notray--mac-x64
        
        
        
    - name: Move Core-notray-win
      if: "startsWith(matrix.OS, 'win')"
      run: |
         ls LedFx-notray--win
         cp LedFx-notray--win/LedFx-notray--win.exe ./frontend/extraResources/LedFx-notray.exe
    - name: Move Core-notray-mac
      if: "startsWith(matrix.OS, 'mac')"
      run: |
         ls LedFx-notray--mac-x64/
         cp LedFx-notray--mac-x64/LedFx-notray--mac-x64.zip ./frontend/extraResources/LedFx_core.app
         

    - name: Move Client Linux
      if: "startsWith(matrix.OS, 'ubu')"
      run: |
         mv ./frontend/dist/LedFx-Client-2.0.0-${{ github.event.inputs.fversion }}-linux.AppImage ./frontend/dist/LedFx_client-${{ github.event.inputs.fversion }}--linux-x64.AppImage
         
    - name: Upload Win-Portable as Asset      
      if: "startsWith(matrix.OS, 'win')"
      id: upload-release-asset-portable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./frontend/dist/LedFx_client-${{ github.event.inputs.fversion }}--win-portable.exe 
        asset_name: LedFx_client-${{ github.event.inputs.fversion }}--win-portable.exe 
        asset_content_type: application/vnd.microsoft.portable-executable
    - name: Upload Win-Setup as Asset      
      if: "startsWith(matrix.OS, 'win')"
      id: upload-release-asset-setup
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./frontend/dist/LedFx_client-${{ github.event.inputs.fversion }}--win-setup.exe 
        asset_name: LedFx_client-${{ github.event.inputs.fversion }}--win-setup.exe 
        asset_content_type: application/vnd.microsoft.portable-executable
    - name: Upload Win-Zip as Asset      
      if: "startsWith(matrix.OS, 'win')"
      id: upload-release-asset-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./frontend/dist/LedFx_client-${{ github.event.inputs.fversion }}--win.zip 
        asset_name: LedFx_client-${{ github.event.inputs.fversion }}--win.zip 
        asset_content_type: application/zip
    - name: Upload Win-CC as Asset      
      if: "startsWith(matrix.OS, 'win')"
      id: upload-release-asset-cc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./frontend/dist/LedFx_CC-${{ github.event.inputs.fversion }}--win-setup.exe
        asset_name: LedFx_CC-${{ github.event.inputs.fversion }}--win-setup.exe 
        asset_content_type: application/vnd.microsoft.portable-executable
        
    - name: Upload Mac-Zip as Asset      
      if: "startsWith(matrix.OS, 'mac')"
      id: upload-release-asset-zip-mac
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./frontend/dist/LedFx_client-${{ github.event.inputs.fversion }}--mac-x64.zip 
        asset_name: LedFx_client-${{ github.event.inputs.fversion }}--mac-x64.zip
        asset_content_type: application/zip
    - name: Upload Mac-CC as Asset      
      if: "startsWith(matrix.OS, 'mac')"
      id: upload-release-asset-cc-mac
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./frontend/dist/LedFx_CC-${{ github.event.inputs.fversion }}--mac-x64.zip
        asset_name: LedFx_CC-${{ github.event.inputs.fversion }}--mac-x64.zip
        asset_content_type: application/zip
         
    - name: Upload Linux as Asset      
      if: "startsWith(matrix.OS, 'ubu')"
      id: upload-release-asset-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./frontend/dist/LedFx_client-${{ github.event.inputs.fversion }}--linux-x64.AppImage 
        asset_name: LedFx_client-${{ github.event.inputs.fversion }}--linux-x64.AppImage 
        asset_content_type: application/octet-stream

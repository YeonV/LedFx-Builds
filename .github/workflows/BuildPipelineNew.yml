name: LedFx BuildPipeline New

on:
  workflow_dispatch:
    inputs:
      fversion:
       description: 'Frontend Version'
       default: '87'
       required: false
      portaudio:
       description: 'Build Portaudio'
       default: 'No'
       required: false
       type: choice
       options:
         - 'Yes'
         - 'No'
      release:
       description: 'Create Release'
       default: 'Yes'
       required: false
       type: choice
       options:
         - 'Yes'
         - 'No'
      macos:
        description: 'MacOS (intel)'
        default: true
        required: false
        type: boolean
      osxarm64:
        description: 'MacOS (m1/m2)'
        default: true
        required: false
        type: boolean
      ubuntu:
        description: 'Ubuntu'
        default: true
        required: false
        type: boolean
      windows:
        description: 'Windows'
        default: true
        required: false
        type: boolean
jobs:

  createrelease:
    name: ${{ github.event.inputs.release == 'Yes' && 'Create Release' || 'Prepare Frontend' }}
    runs-on: [ubuntu-latest]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:    
    - name: Get latest frontend and prepare matrix
      run: |
        curl -L --max-redirs 10 -o ledfx_frontend_v2.zip "https://github.com/YeonV/LedFx-Frontend-v2/releases/latest/download/ledfx_frontend_v2.zip"

    - name: Save Frontend for publish
      uses: actions/upload-artifact@v3
      with:
        name: ledfx_frontend_v2
        path: ledfx_frontend_v2.zip     
    - name: Get Messages    
      if: github.event.inputs.release == 'Yes'
      run: |
        unzip -p ledfx_frontend_v2.zip ledfx_frontend_v2/messages.md >message.md
        echo "## New LedFx binaries available:

        ### Core:  -- Browser-Based
        ### Client:   -- Desktop-App (needs a running Core)
        ### CC:  -- Desktop-App (Core-integrated)

        ---

        ##  More informations regarding Core, Client and CC:

        <details><summary>expand</summary>

        #### Core
        If you don't know where to start, get this, open an internet browser, go to https://localhost:8888/ and off you go.
        This is the server/backend that takes in audio, does the calculations and outputs blinking lights. Runs in the background on a Windows/Mac/Linux computer. You can then open the frontend in an internet browser, by going to https://localhost:8888/ on the same computer that is running the Core.
        You can also pull up the frontend on your smartphone (or any other computer on the same network) by finding out what local IP your computer running the Core uses (most likely something like this 192.168.1.XXX, or 192.168.0.XXX) and opening a Browser on your smartphone and going to eg. https://192.168.1.123:8888/


        #### Client
        This is a Desktop App that opens the frontend of LedFx in a window on your desktop.
        This app does NOT include the LedFx backend/server and cannot run LedFx by itself without the Core.
        This Client app is useful for connecting to a running Core on your network (or the same machine).

        ### CC (Client + Core = CC)
        This is the Client and Core integrated into one Desktop App.
        This Desktop App opens the Client frontend of LedFx in a window on your desktop AND runs the Core backend/server in the background.
        This is useful for people who want the whole LedFx experience in one nice and tidy package.
        With this, you can still connect to the backend server via a Client or browser.

        </details>

        ---

        ## ⚠️ These builds are not signed  (read this please):

        <details><summary>Mac-Users:</summary>

        #### Infos:
        Reports as damaged, because of unsiged.
        To fix it open Terminal and type in the following (with a SPACE at the end):
        
        <code>sudo xattr -cr </code>
        
        Then drag'n'drop the LedFx.app File into the terminal and hit enter -> it should ask for sudo password

        Now you can open the App normally, give microphone and network permission, and you can even drag it into your applications.
        Maybe at some point we might buy an apple dev-license for 99€/year, then the voodoo would not be needed anymore.

        </details>


        <details><summary>Win-Users:</summary>

        #### Infos:
        Reports as unsave, because of unsiged.

        Maybe at some point we might buy a microsoft dev-license

        </details>
        " >> ./messages.md
        
    - uses: actions/checkout@v3      
      if: github.event.inputs.release == 'Yes'
      with:
        repository: YeonV/LedFx-Frontend-v2
        ref: main
        path: frontend        
        fetch-depth: 0
        
    - name: Get frontend Changelog    
      if: github.event.inputs.release == 'Yes'
      run: |
        cd frontend
        echo "
        ### Frontend-Changes:
        <details><summary>Expand</summary>
        
        " >> ../messages.md
        git log --pretty=format:"+ %s [![by](https://img.shields.io/badge/by-$(echo %an)-blue.svg?logo=github&logoColor=white)](https://github.com/LedFx/LedFx/commit/%h)" $(git describe --tags --abbrev=0 @^)..@ | grep -v -E '(cleanup)' | awk '{ sub(/\[\[!\]\]/, ""); msg = substr($0, 1, index($0, "[!") - 1); if (length(msg) >= 5 && !seen[msg]++) { print $0 } }' | awk '{ while (match($0, /https:\/\/img\.shields\.io\/badge\/by-[^"]*-blue\.svg\?logo=github&logoColor=white/)) { url = substr($0, RSTART, RLENGTH); gsub(" ", "_", url); gsub("-", "_", url); gsub("by_", "by-", url); gsub("_blue", "-blue", url); printf "%s%s", substr($0, 1, RSTART - 1), url; $0 = substr($0, RSTART + RLENGTH) } gsub(" ", "_", $0); print }' >> ../messages.md
        echo "
        </details>
        
        " >> ../messages.md
        cat ../messages.md
    - uses: actions/checkout@v3
      if: github.event.inputs.release == 'Yes'
      with:
        repository: LedFx/LedFx
        ref: main
        path: backend
        fetch-depth: 0
        
    - name: Get Backend Changelog
      if: github.event.inputs.release == 'Yes'
      run: |
        cd backend
        echo "
        ### Backend Changes
        <details><summary>Expand</summary>
        
        " >> ../messages.md
        git log --pretty=format:"+ %s [![by](https://img.shields.io/badge/by-$(echo %an)-blue.svg?logo=github&logoColor=white)](https://github.com/LedFx/LedFx/commit/%h)" $(git describe --tags --abbrev=0 @^)..@ | grep -v -E '(cleanup)' | awk '{ sub(/\[\[!\]\]/, ""); msg = substr($0, 1, index($0, "[!") - 1); if (length(msg) >= 5 && !seen[msg]++) { print $0 } }' | awk '{ while (match($0, /https:\/\/img\.shields\.io\/badge\/by-[^"]*-blue\.svg\?logo=github&logoColor=white/)) { url = substr($0, RSTART, RLENGTH); gsub(" ", "_", url); gsub("-", "_", url); gsub("by_", "by-", url); gsub("_blue", "-blue", url); printf "%s%s", substr($0, 1, RSTART - 1), url; $0 = substr($0, RSTART + RLENGTH) } gsub(" ", "_", $0); print }' >> ../messages.md
        echo "
        </details>
        
        " >> ../messages.md
        cat ../messages.md
    - name: Create Release
      if: github.event.inputs.release == 'Yes'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.action_state || '2.0' }}.${{ github.event.inputs.fversion }}
        release_name: Release v${{ env.action_state || '2.0'}}.${{ github.event.inputs.fversion }}
        body_path: ./messages.md
        draft: false
        prerelease: true
    - name: Output Release URL File
      if: github.event.inputs.release == 'Yes'
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      if: github.event.inputs.release == 'Yes'
      uses: actions/upload-artifact@v3
      with:
        name: release_url
        path: release_url.txt
    - name: Check Inputs and Prepare Matrix
      id: set-matrix
      run: |
        echo windows: ${{ github.event.inputs.windows }}
        echo ubuntu: ${{ github.event.inputs.ubuntu }}
        echo macos: ${{ github.event.inputs.macos }}

        os_list=()
        if [ "${{ github.event.inputs.windows }}" = "true" ]; then
          os_list+=('windows-latest')
        fi
        if [ "${{ github.event.inputs.ubuntu }}" = "true" ]; then
          os_list+=('ubuntu-latest')
        fi
        if [ "${{ github.event.inputs.macos }}" = "true" ]; then
          os_list+=('macos-latest')
        fi
        if [ "${{ github.event.inputs.osxarm64 }}" = "true" ]; then
          os_list+=('osx-arm64')
        fi

        matrix_json="{\"os\": ["
        for os in "${os_list[@]}"; do
          matrix_json+="\"$os\","
        done
        matrix_json=${matrix_json%?} # remove trailing comma
        matrix_json+="], \"python-version\": [\"3.12.x\"]}"
        
        echo "$matrix_json" > matrix.json
        echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

        
  build:
    needs: createrelease
    continue-on-error: true
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -x {0}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.createrelease.outputs.matrix)}}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
        with:
          repository: LedFx/LedFx
          ref: main
          path: src

      - uses: actions/checkout@v3
        name: Check out tools from GitHub
        with:
          repository: YeonV/LedFx-Builds
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          path: src2
      - name: Delete old frontend
        uses: JesseTG/rm@v1.0.3
        with:
          path: ./src/ledfx_frontend
      - name: get git version
        run: |        
          cd src
          git rev-parse HEAD >> ledfx/git_version
          cd ..
      - name: Get latest frontend
        run: |
          curl -L --max-redirs 10 -o ledfx_frontend_v2.zip "https://github.com/YeonV/LedFx-Frontend-v2/releases/latest/download/ledfx_frontend_v2.zip"
      - name: Include new frontend
        if: "startsWith(matrix.OS, 'osx-arm64')"
        run: |
          cd ./ledfx_frontend_v2
          ls
          unzip -o -u ledfx_frontend_v2.zip
          cd ..
          cp -rf ./ledfx_frontend_v2 ./src/ledfx_frontend
          ls ./src/ledfx_frontend

      - name: Include new frontend win    
        if: "!startsWith(matrix.OS, 'osx-arm64')"
        run: |
          unzip ledfx_frontend_v2.zip
          cp -r ./ledfx_frontend_v2 ./src/ledfx_frontend
          ls ./src/ledfx_frontend
          
      - name: Disable Sentry
        if: "!startsWith(matrix.OS, 'osx-arm64') && !startsWith(matrix.OS, 'macos')"
        run: |
          sed -i '/if args.offline_mode is False:/d' ./src/ledfx/__main__.py
          sed -i '/setup_sentry()/d' ./src/ledfx/__main__.py
          
      - name: Disable Sentry Osx
        if: "startsWith(matrix.OS, 'osx-arm64') || startsWith(matrix.OS, 'macos')"
        run: |
          sed -i '' '/if args.offline_mode is False:/d' ./src/ledfx/__main__.py
          sed -i '' '/setup_sentry()/d' ./src/ledfx/__main__.py
          
      - name: Set up Python
        if: "!startsWith(matrix.OS, 'osx-arm64')"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install build dependencies for osx-arm
        if: "startsWith(matrix.OS, 'osx-arm64')"
        run: |
          arch -arm64 brew install portaudio
          arch -arm64 brew install mbedtls@2
          arch -arm64 brew install libsamplerate
          arch -arm64 brew install poetry
    
      - name: Setup mbedtls path for osx-arm64
        if: "startsWith(matrix.OS, 'osx-arm64')"
        run: |
          echo "/opt/homebrew/opt/mbedtls@2/bin" >> $GITHUB_PATH
          
      - name: Get full Python version
        if: "!startsWith(matrix.OS, 'osx-arm64')"
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT
        
      - name: Check Python version osx-arm64
        if: "startsWith(matrix.OS, 'osx-arm64')"
        run: |
          arch -arm64 poetry --version
          
      - name: Install poetry
        if: "!startsWith(matrix.OS, 'osx-arm64')"
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update Path for Windows
        if: "!startsWith(matrix.OS, 'osx-arm64') && !startsWith(matrix.OS, 'macos')"
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Update Path for MacOS
        if: "startsWith(matrix.OS, 'macos')"
        run: echo "$HOME/.local/bin:$PATH" >> $GITHUB_PATH

      - name: Enable long paths for git on Windows
        if: "startsWith(matrix.OS, 'win')"
        run: git config --system core.longpaths true

      - name: Configure poetry
        if: "!startsWith(matrix.OS, 'osx-arm64')"
        run: poetry config virtualenvs.in-project true
        
      - name: Configure poetry osx-arm64
        if: "startsWith(matrix.OS, 'osx-arm64')"
        run: |
          arch -arm64 poetry config virtualenvs.in-project true
          arch -arm64 poetry env info

      - name: Get pip cache dir
        if: "!startsWith(matrix.OS, 'osx-arm64')"
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
          echo "dir=$(pip cache dir)"
      - name: pip cache
        if: "!startsWith(matrix.OS, 'osx-arm64')"
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Bump version    
        if: "startsWith(matrix.OS, 'win') || startsWith(matrix.OS, 'ubu')"  
        run: |
          sed -i 's/\(PROJECT_VERSION = "[0-9]*\.[0-9]*\.\)[0-9]*"/\1${{ github.event.inputs.fversion }}"/' ./src/ledfx/consts.py
          sed -i 's/\(version = "[0-9]*\.[0-9]*\.\)[0-9]*"/\1${{ github.event.inputs.fversion }}"/' ./src/pyproject.toml
          
      - name: Bump version osx
        if: "!startsWith(matrix.OS, 'win') && !startsWith(matrix.OS, 'ubu')"  
        run: |
          brew install gnu-sed
          cd src
          gsed -i 's/\(PROJECT_VERSION = "[0-9]*\.[0-9]*\.\)[0-9]*"/\1${{ github.event.inputs.fversion }}"/' ./ledfx/consts.py; gsed -i 's/\(version = "[0-9]*\.[0-9]*\.\)[0-9]*"/\1${{ github.event.inputs.fversion }}"/' ./pyproject.toml

      - uses: stefanzweifel/git-auto-commit-action@v4
        continue-on-error: true
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'Yes'
        with:
          commit_message: "[new-frontend] v2.0.${{ github.event.inputs.fversion }}"
          push_options: --force   
          repository: ./src
          token: ${{ secrets.LEDFX_TOKEN }}
          tagging_message: 'v2.0.${{ github.event.inputs.fversion }}'
      - name: Create Pull Request
        continue-on-error: true
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'Yes'
        uses: peter-evans/create-pull-request@v4
        with:
          path: ./src
          token: ${{ secrets.LEDFX_TOKEN }}
          delete-branch: true
          branch: new-frontend
          commit-message: "[new-frontend] v2.0.${{ github.event.inputs.fversion }}"
          title: Release v2.0.${{ github.event.inputs.fversion }}
          body: New version incoming!

      - name: Check lock file
        if: "!startsWith(matrix.OS, 'osx-arm64')"
        run: |
          cd src
          poetry check --lock
          
      - name: Check lock file osx-arm64
        if: "startsWith(matrix.OS, 'osx-arm64')"
        run: |
          cd src
          arch -arm64 poetry check --lock
        
      - name: Build a binary wheel
        if: "!startsWith(matrix.OS, 'osx-arm64')"
        run: |        
          cd src
          poetry install --extras hue
          poetry build

      - name: Build a binary wheel osx-arm64
        if: "startsWith(matrix.OS, 'osx-arm64')"
        run: |
          cd src
          arch -arm64 poetry install --extras hue
          arch -arm64 poetry build

      - name: Install LedFx
        if: "!startsWith(matrix.OS, 'osx-arm64')"
        run: |
          cd src
          poetry install --extras hue
          poetry env info
          echo "poetry_venv_location=$(poetry env info --path)" >> $GITHUB_ENV
          poetry run ledfx-loopback-install
          poetry run pip install pyinstaller
          poetry run pip install samplerate==0.2.1
          
      - name: Install LedFx osx-arm64
        if: "startsWith(matrix.OS, 'osx-arm64')"
        run: |
          cd src
          arch -arm64 poetry install --extras hue
          arch -arm64 poetry run pip install samplerate==0.2.1
          
      - name: Get Backend Version and poetry-venv-path
        id: getbackendver
        run: |
          cd src
          poetry run ledfx --version | cut -d' '
          echo "action_state=$(poetry run ledfx --version | cut -d' ' -f2| cut -d. -f1,2).${{ github.event.inputs.fversion }}" >> $GITHUB_ENV
          BINARY_NAME=LedFx_core-
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo $action_state
          echo $BINARY_NAME
          echo $poetry_venv_location

      - name: Portaudio dependency for windows
        if: startsWith(runner.os, 'Windows') && github.event.inputs.portaudio == 'true'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
              git
              zip
              unzip
              base-devel
              mingw-w64-x86_64-gcc
              mingw-w64-x86_64-cmake
              mingw-w64-x86_64-ninja

      - name: Build portaudio
        if: startsWith(runner.os, 'Windows') && github.event.inputs.portaudio == 'true'
        shell: msys2 {0}
        run: |
          export CYGPATH=$(cygpath -m /)
          git clone https://github.com/portaudio/portaudio
          cmake -B portaudio/.build -S portaudio -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} -DPA_BUILD_SHARED_LIBS=on -DCMAKE_BUILD_TYPE=Release -DPA_USE_ASIO=on
          cmake --build portaudio/.build/
          cmake --install portaudio/.build/
          rm -rf portaudio
          mv $CYGPATH/mingw64/bin/libportaudio.dll $poetry_venv_location/lib/site-packages/_sounddevice_data/portaudio-binaries/libportaudio64bit.dll

      - name: Build ${{ env.BINARY_NAME }} ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        run: |
          # mv src2/tools/win/hook-samplerate.py $poetry_venv_location/lib/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks/hook-samplerate.py
          mv src2/tools/win/win.spec src/win.spec
          cd src
          poetry run pip install samplerate==0.2.1
          poetry run pyinstaller win.spec
          mv dist/LedFx $BINARY_NAME-v$action_state
          7z.exe a -tzip $BINARY_NAME-v$action_state--win.zip $BINARY_NAME-v$action_state "-mx5" "-xr!.git" "-xr!.github"
          
      - name: Build ${{ env.BINARY_NAME }} ${{ env.action_state }} osx-x64
        if: "startsWith(matrix.OS, 'mac')"
        run: |          
          mv src2/tools/mac/mac.spec src/mac.spec
          cd src
          # sed -i '' -e "s/2.0.51/\${{ env.action_state }}/g" mac.spec
          poetry run pip install pyinstaller
          poetry run pip install samplerate==0.2.1
          poetry run pyinstaller mac.spec
          cd dist/ && mkdir LedFx && chmod +x ./LedFx_v2/Contents/MacOS/LedFx_v2 && mkdir -p ./LedFx_v2/Contents/Frameworks/samplerate/_samplerate_data/ && cp -rf ../../src2/tools/mac/libsamplerate-x86-x64.dylib ./LedFx_v2/Contents/Frameworks/samplerate/_samplerate_data/libsamplerate.dylib && mv ./LedFx_v2 ./LedFx/LedFx.app
          cd ..
          rm -rf ./LedFx.app
          mv ./dist/LedFx/LedFx.app ./LedFx.app
          tar -czf my_files.tar ./LedFx.app
          
      - name: Build ${{ env.BINARY_NAME }} ${{ env.action_state }} osx-arm64
        if: "startsWith(matrix.OS, 'osx-arm64')"
        run: |          
          mv src2/tools/mac/mac-arm64.spec src/mac.spec
          cd src
          # sed -i '' -e "s/2.0.51/\${{ env.action_state }}/g" mac.spec
          arch -arm64 poetry run pip install pyinstaller
          arch -arm64 poetry run pyinstaller mac.spec
          cd dist/ && mkdir LedFx && chmod +x ./LedFx_v2/Contents/MacOS/LedFx_v2 && mkdir -p ./LedFx_v2/Contents/Frameworks/samplerate/_samplerate_data/ && cp -rf ../../src2/tools/mac/libsamplerate-arm64.dylib ./LedFx_v2/Contents/Frameworks/samplerate/_samplerate_data/libsamplerate.dylib && mv ./LedFx_v2 ./LedFx/LedFx.app
          cd ..
          rm -rf ./LedFx.app
          mv ./dist/LedFx/LedFx.app ./LedFx.app
          tar -czf my_files.tar ./LedFx.app

      - name: Build ${{ env.BINARY_NAME }} ${{ env.action_state }} linux
        if: "startsWith(matrix.OS, 'ubuntu')"
        run: |          
          sudo apt install libatlas3-base \
            libavformat58 \
            portaudio19-dev \
            pulseaudio 
          mv src2/tools/linux/yzlinux.spec src/linux.spec
          cd src
          poetry run pip install pyinstaller
          poetry run pip install samplerate==0.2.1
          poetry run pip install mido
          poetry run pyinstaller linux.spec
          cd dist && mkdir LedFx-linux && mv ./LedFx ./LedFx-linux/LedFx && cd ..
          cd ..
          cd src/dist && ls && tar -czf LedFx_core-v${{ env.action_state }}--linux-x64.tar.gz ./LedFx-linux


      - name: Load Release URL File from release job
        if: github.event.inputs.release == 'Yes'
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        if: github.event.inputs.release == 'Yes'
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Load Frontend Build File from release job
        if: startsWith(runner.os, 'Windows')
        uses: actions/download-artifact@v1
        with:
          name: ledfx_frontend_v2
      - name: Upload Frontend Build to Release
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'Yes'  
        id: upload-release-asset-2
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./ledfx_frontend_v2/ledfx_frontend_v2.zip
          asset_name: ledfx_frontend-v${{ env.action_state }}.zip
          asset_content_type: application/zip

      - name: Upload Frontend Build to Workflow
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'No'
        uses: actions/upload-artifact@v3
        with:
            name: ledfx_frontend-v${{ env.action_state }}.zip
            path: ledfx_frontend_v2/ledfx_frontend_v2.zip
          
      - name: Upload Core Win To Release
        if: startsWith(runner.os, 'Windows') &&  github.event.inputs.release == 'Yes' && github.event.inputs.windows == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: src/${{ env.BINARY_NAME }}-v${{ env.action_state }}--win.zip
          asset_name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--win.zip
          asset_content_type: application/zip

      - name: Upload Core Win To Workflow
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'No' && github.event.inputs.windows == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--win.zip
            path: src/${{ env.BINARY_NAME }}-v${{ env.action_state }}--win.zip

      - name: Upload Core Osx-arm64 To Release        
        if: startsWith(matrix.OS, 'osx-arm64') && github.event.inputs.release == 'Yes' && github.event.inputs.osxarm64 == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: src/my_files.tar
          asset_name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--osx-arm64.zip
          asset_content_type: application/zip

      - name: Upload Core Osx-arm64 to Workflow
        if: startsWith(matrix.OS, 'osx-arm64') &&  github.event.inputs.release == 'No' && github.event.inputs.osxarm64 == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--osx-arm64.zip
            path: src/my_files.tar

      - name: Upload Core Osx To Release        
        if: startsWith(matrix.OS, 'macos') && github.event.inputs.release == 'Yes' && github.event.inputs.macos == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: src/my_files.tar
          asset_name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--osx-x64.zip
          asset_content_type: application/zip
          
      - name: Upload Core Osx to Workflow
        if: startsWith(matrix.OS, 'macos') &&  github.event.inputs.release == 'No' && github.event.inputs.macos == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--osx-x64.zip
            path: src/my_files.tar

      - name: Build ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        run: |
            cp src2/tools/win/yzwin.spec ./src/win-portable.spec
            cd src
            poetry run pyinstaller win-portable.spec
            ls dist/
            mv dist/LedFx.exe dist/$BINARY_NAME-v$action_state--win-portable.exe


      - name: Upload Core Linux To Release
        if: startsWith(matrix.os, 'ubuntu') &&  github.event.inputs.release == 'Yes' && github.event.inputs.ubuntu == 'true'
        continue-on-error: true
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: src/dist/LedFx_core-v${{ env.action_state }}--linux-x64.tar.gz
          asset_name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--linux-x64.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload Core Linux To Worflow       
        if: startsWith(matrix.os, 'ubuntu') &&  github.event.inputs.release == 'No' && github.event.inputs.ubuntu == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--linux-x64.tar.gz
            path: src/dist/LedFx_core-v${{ env.action_state }}--linux-x64.tar.gz
          
      - name: Upload Core Win Portable To Release
        if: startsWith(runner.os, 'Windows') &&  github.event.inputs.release == 'Yes' && github.event.inputs.windows == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: src\dist\${{ env.BINARY_NAME }}-v${{ env.action_state }}--win-portable.exe
          asset_name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--win-portable.exe
          asset_content_type: application/vnd.microsoft.portable-executable
          
      - name: Upload Core Win Portable To Worflow
        if: startsWith(runner.os, 'Windows') &&  github.event.inputs.release == 'No' && github.event.inputs.windows == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}v${{ env.action_state }}--win-portable.exe
            path: src\dist\${{ env.BINARY_NAME }}-v${{ env.action_state }}--win-portable.exe


      # CLIENTS
      - uses: actions/checkout@v3
        with:
          repository: YeonV/LedFx-Frontend-v2
          ref: main
          path: frontend
          
      - name: Move Core-win
        continue-on-error: true
        if: startsWith(runner.os, 'Windows') && github.event.inputs.windows == 'true'
        run: |
           ls ./src
           echo ------------
           ls ./src/LedFx_core--v${{ env.action_state }}
           echo ------------
           ls ./src/dist
           echo ------------           
           cp -r ./src/LedFx_core--v${{ env.action_state }}/ ./frontend/extraResources/LedFx/ &&
           ls ./frontend/extraResources/LedFx
           
      - name: Move Core-osx
        if: (startsWith(matrix.OS, 'osx') || startsWith(matrix.OS, 'mac')) && github.event.inputs.macos == 'true'
        continue-on-error: true
        run: |
           cp -r ./src/LedFx.app ./frontend/extraResources/LedFx_core.app
           echo ------------           
           ls ./frontend/extraResources

      - name: Move Core Linux
        if: startsWith(matrix.OS, 'ubuntu') && github.event.inputs.ubuntu == 'true'
        continue-on-error: true
        run: |
           ls
           cp -r ./src/dist/LedFx-linux/LedFx ./frontend/extraResources/LedFx
           echo ------------           
           ls ./frontend/extraResources
           
      - name: Set up Node.js
        if: "!startsWith(matrix.OS, 'osx-arm64')" 
        uses: actions/setup-node@v3
        with:
          node-version: 20
          # architecture: ${{ matrix.arch }}
          # cache: 'yarn'
          # cache-dependency-path: '**/yarn.lock'
      - name: Set up Node.js osx-arm64
        if: "startsWith(matrix.OS, 'osx-arm64')" 
        uses: actions/setup-node@v3
        with:
          node-version: 20
          architecture: arm64
          # cache: 'yarn'
          # cache-dependency-path: '**/yarn.lock'
      - name: Building Clients
        run: |
           cd frontend && npm config set legacy-peer-deps true && npm install --force && npm install postcss && npm run distall
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Load Release URL File from release job
        if: github.event.inputs.release == 'Yes'
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Upload Win-Portable to Release      
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'Yes' && github.event.inputs.windows == 'true'
        id: upload-release-asset-portable
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win-portable.exe
          asset_name: LedFx_client-v${{ env.action_state }}--win-portable.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Win-Portable to Workflow
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'No' && github.event.inputs.windows == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_client-v${{ env.action_state }}--win-portable.exe
            path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win-portable.exe
  
      - name: Upload Win-Setup to Release      
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'Yes' && github.event.inputs.windows == 'true'
        id: upload-release-asset-setup
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win-setup.exe 
          asset_name: LedFx_client-v${{ env.action_state }}--win-setup.exe 
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Win-Setup to Workflow
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'No' && github.event.inputs.windows == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_client-v${{ env.action_state }}--win-setup.exe
            path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win-setup.exe
      - name: Upload Win-Zip to Release      
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'Yes' && github.event.inputs.windows == 'true'
        id: upload-release-asset-zip
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win.zip 
          asset_name: LedFx_client-v${{ env.action_state }}--win.zip 
          asset_content_type: application/zip
      - name: Upload Win-Zip to Workflow
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'No' && github.event.inputs.windows == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_client-v${{ env.action_state }}--win.zip
            path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--win.zip
  
      - name: Upload Win-CC to Release      
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'Yes' && github.event.inputs.windows == 'true'
        id: upload-release-asset-cc
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--win-setup.exe
          asset_name: LedFx_CC-v${{ env.action_state }}--win-setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Win-CC to Workflow
        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'No' && github.event.inputs.windows == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_CC-v${{ env.action_state }}--win-setup.exe
            path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--win-setup.exe

      - name: Upload OSX-arm64-Client dmg to Release
        if: startsWith(matrix.OS, 'osx-arm64') && github.event.inputs.release == 'Yes' && github.event.inputs.osxarm64 == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-arm64.dmg
          asset_name: LedFx_client-v${{ env.action_state }}--mac-arm64.dmg
          asset_content_type: application/octet-stream

      - name: Upload OSX-arm64-Client dmg to Workflow
        if: startsWith(matrix.OS, 'osx-arm64') && github.event.inputs.release == 'No' && github.event.inputs.osxarm64 == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_client-v${{ env.action_state }}--mac-arm64.dmg
            path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-arm64.dmg

      - name: Upload OSX-arm64-Client zip to Release
        if: startsWith(matrix.OS, 'osx-arm64') && github.event.inputs.release == 'Yes' && github.event.inputs.osxarm64 == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-arm64.zip
          asset_name: LedFx_client-v${{ env.action_state }}--mac-arm64.zip
          asset_content_type: application/zip

      - name: Upload OSX-arm64-Client zip to Workflow
        if: startsWith(matrix.OS, 'osx-arm64') && github.event.inputs.release == 'No' && github.event.inputs.osxarm64 == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_client-v${{ env.action_state }}--mac-arm64.zip
            path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-arm64.zip
          
      - name: Upload OSX-arm64-CC dmg to Release
        if: startsWith(matrix.OS, 'osx-arm64') && github.event.inputs.release == 'Yes' && github.event.inputs.osxarm64 == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-arm64.dmg
          asset_name: LedFx_CC-v${{ env.action_state }}--mac-arm64.dmg
          asset_content_type: application/octet-stream

      - name: Upload OSX-arm64-CC dmg to Workflow
        if: startsWith(matrix.OS, 'osx-arm64') && github.event.inputs.release == 'No' && github.event.inputs.osxarm64 == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_CC-v${{ env.action_state }}--mac-arm64.dmg
            path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-arm64.dmg

      - name: Upload OSX-arm64-CC zip to Release
        if: startsWith(matrix.OS, 'osx-arm64') && github.event.inputs.release == 'Yes' && github.event.inputs.osxarm64 == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-arm64.zip
          asset_name: LedFx_CC-v${{ env.action_state }}--mac-arm64.zip
          asset_content_type: application/zip

      - name: Upload OSX-arm64-CC zip to Workflow
        if: startsWith(matrix.OS, 'osx-arm64') && github.event.inputs.release == 'No' && github.event.inputs.osxarm64 == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_CC-v${{ env.action_state }}--mac-arm64.zip
            path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-arm64.zip

      - name: Upload Linux Client snap to Release
        continue-on-error: true      
        if: startsWith(matrix.OS, 'ubuntu') && github.event.inputs.release == 'Yes' && github.event.inputs.ubuntu == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--linux.snap
          asset_name: LedFx_client-v${{ env.action_state }}--linux-amd64.snap
          asset_content_type: application/octet-stream
      - name: Upload Linux Client snap to Workflow
        continue-on-error: true      
        if: startsWith(matrix.OS, 'ubuntu') && github.event.inputs.release == 'No' && github.event.inputs.ubuntu == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_client-v${{ env.action_state }}--linux-amd64.snap
            path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--linux.snap

      - name: Upload Linux Client AppImage to Release
        continue-on-error: true    
        if: startsWith(matrix.OS, 'ubuntu') && github.event.inputs.release == 'Yes' && github.event.inputs.ubuntu == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--linux.AppImage
          asset_name: LedFx_client-v${{ env.action_state }}--linux-amd64.AppImage
          asset_content_type: application/octet-stream
      - name: Upload Linux Client AppImage to Workflow
        continue-on-error: true    
        if: startsWith(matrix.OS, 'ubuntu') && github.event.inputs.release == 'No' && github.event.inputs.ubuntu == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_client-v${{ env.action_state }}--linux-amd64.AppImage
            path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--linux.AppImage

      - name: Upload Linux CC snap to Release
        continue-on-error: true  
        if: startsWith(matrix.OS, 'ubuntu') && github.event.inputs.release == 'Yes' && github.event.inputs.ubuntu == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--linux.snap
          asset_name: LedFx_CC-v${{ env.action_state }}--linux-amd64.snap
          asset_content_type: application/octet-stream
      - name: Upload Linux CC snap to Workflow
        continue-on-error: true  
        if: startsWith(matrix.OS, 'ubuntu') && github.event.inputs.release == 'No' && github.event.inputs.ubuntu == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_CC-v${{ env.action_state }}--linux-amd64.snap
            path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--linux.snap

      - name: Upload Linux CC AppImage to Release
        continue-on-error: true   
        if: startsWith(matrix.OS, 'ubuntu') && github.event.inputs.release == 'Yes' && github.event.inputs.ubuntu == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--linux.AppImage
          asset_name: LedFx_CC-v${{ env.action_state }}--linux-amd64.AppImage
          asset_content_type: application/octet-stream
      - name: Upload Linux CC AppImage to Workflow
        continue-on-error: true   
        if: startsWith(matrix.OS, 'ubuntu') && github.event.inputs.release == 'No' && github.event.inputs.ubuntu == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_CC-v${{ env.action_state }}--linux-amd64.AppImage
            path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--linux.AppImage

      - name: Upload OSX-x64-Client dmg to Release
        if: startsWith(matrix.OS, 'mac') && github.event.inputs.release == 'Yes' && github.event.inputs.macos == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-x64.dmg
          asset_name: LedFx_client-v${{ env.action_state }}--mac-x64.dmg
          asset_content_type: application/octet-stream

      - name: Upload OSX-x64-Client dmg to Workflow
        if: startsWith(matrix.OS, 'mac') && github.event.inputs.release == 'No' && github.event.inputs.macos == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_client-v${{ env.action_state }}--mac-x64.dmg
            path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-x64.dmg

      - name: Upload OSX-x64-Client zip to Release
        if: startsWith(matrix.OS, 'mac') && github.event.inputs.release == 'Yes' && github.event.inputs.macos == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-x64.zip
          asset_name: LedFx_client-v${{ env.action_state }}--mac-x64.zip
          asset_content_type: application/zip
      - name: Upload OSX-x64-Client zip to Workflow
        if: startsWith(matrix.OS, 'mac') && github.event.inputs.release == 'No' && github.event.inputs.macos == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_client-v${{ env.action_state }}--mac-x64.zip
            path: ./frontend/dist/LedFx_client-v${{ env.action_state }}--mac-x64.zip
          
      - name: Upload OSX-x64-CC dmg to Release
        continue-on-error: true   
        if: startsWith(matrix.OS, 'mac') && github.event.inputs.release == 'Yes' && github.event.inputs.macos == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-x64.dmg
          asset_name: LedFx_CC-v${{ env.action_state }}--mac-x64.dmg
          asset_content_type: application/octet-stream

      - name: Upload OSX-x64-CC dmg to Workflow
        continue-on-error: true   
        if: startsWith(matrix.OS, 'mac') && github.event.inputs.release == 'No' && github.event.inputs.macos == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_CC-v${{ env.action_state }}--mac-x64.dmg
            path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-x64.dmg

      - name: Upload OSX-x64-CC zip to Release
        continue-on-error: true   
        if: startsWith(matrix.OS, 'mac') && github.event.inputs.release == 'Yes' && github.event.inputs.macos == 'true'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-x64.zip
          asset_name: LedFx_CC-v${{ env.action_state }}--mac-x64.zip
          asset_content_type: application/zip

      - name: Upload OSX-x64-CC zip to Workflow
        continue-on-error: true   
        if: startsWith(matrix.OS, 'mac') && github.event.inputs.release == 'No' && github.event.inputs.macos == 'true'
        uses: actions/upload-artifact@v3
        with:
            name: LedFx_CC-v${{ env.action_state }}--mac-x64.zip
            path: ./frontend/dist/LedFx_CC-v${{ env.action_state }}--mac-x64.zip

#      - name: Send Discord Release Post
#        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'Yes'
#        run: |
#          curl -H "Content-Type: application/json" -d '{"content": "**[DOWNLOAD]** https://github.com/YeonV/LedFx-Builds/releases/tag/v${{ env.action_state }}\n\n**[PREVIEW]**       <https://preview.ledfx.app>**Please** do not send messages here. Use the [testing]-Post instead!", "thread_name": "[beta] Release 2.0.${{ github.event.inputs.fversion }}"}' ${{ secrets.DISCORD_RELEASE_WEBHOOK }}
#          curl -H "Content-Type: application/json" -d '{"content": "https://github.com/YeonV/LedFx-Builds/releases/tag/v${{ env.action_state }}", "thread_name": "[testing] Release 2.0.${{ github.event.inputs.fversion }}"}' ${{ secrets.DISCORD_RELEASE_WEBHOOK }}
#          
#      - name: Send Discord Beta Post
#        if: startsWith(runner.os, 'Windows') && github.event.inputs.release == 'No'
#        run: |
#          curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"New Beta-Binaries available\n**DOWNLOAD:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n:regional_indicator_a: LedFx_core-v${{ env.action_state }}--win.zip\n:regional_indicator_b: LedFx_CC-v${{ env.action_state }}--linux-amd64.snap\n:regional_indicator_c: LedFx_CC-v${{ env.action_state }}--mac-arm64.dmg\n:regional_indicator_d: LedFx_CC-v${{ env.action_state }}--mac-arm64.zip\n:regional_indicator_e: LedFx_CC-v${{ env.action_state }}--mac-x64.dmg\n:regional_indicator_f: LedFx_CC-v${{ env.action_state }}--mac-x64.zip\n:regional_indicator_g: LedFx_CC-v${{ env.action_state }}--win-setup.exe\n:regional_indicator_h: LedFx_client-v${{ env.action_state }}--linux-amd64.AppImage\n:regional_indicator_i: LedFx_client-v${{ env.action_state }}--linux-amd64.snap\n:regional_indicator_j: LedFx_client-v${{ env.action_state }}--mac-arm64.dmg\n:regional_indicator_k: LedFx_client-v${{ env.action_state }}--mac-arm64.zip\n:regional_indicator_l: LedFx_client-v${{ env.action_state }}--mac-x64.dmg\n:regional_indicator_m: LedFx_client-v${{ env.action_state }}--mac-x64.zip\n:regional_indicator_o: LedFx_client-v${{ env.action_state }}--win-portable.exe\n:regional_indicator_p: LedFx_client-v${{ env.action_state }}--win-setup.exe\n:regional_indicator_q: LedFx_client-v${{ env.action_state }}--win.zip\n:regional_indicator_r: LedFx_core-v${{ env.action_state }}--linux-x64.tar.gz\n:regional_indicator_s: LedFx_core-v${{ env.action_state }}--osx-arm64.zip\n:regional_indicator_t: LedFx_core-v${{ env.action_state }}--osx-x64.zip\n:regional_indicator_u: LedFx_core-v${{ env.action_state }}--win-portable.exe\n:regional_indicator_v: LedFx_CC-v${{ env.action_state }}--linux-amd64.AppImage\"}" https://discord.com/api/webhooks/1196958406234345522/zSejZjvGh2rWdAIyIp3IL-8W-yXniX4bsXNxHi9Mn6QmlbhCThWPSDYoLT_PO5a2WQAb
#          curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"======================================\n**NOT WORKING**\"}" https://discord.com/api/webhooks/1196958406234345522/zSejZjvGh2rWdAIyIp3IL-8W-yXniX4bsXNxHi9Mn6QmlbhCThWPSDYoLT_PO5a2WQAb
#          curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"======================================\n**WORKING**\"}" https://discord.com/api/webhooks/1196958406234345522/zSejZjvGh2rWdAIyIp3IL-8W-yXniX4bsXNxHi9Mn6QmlbhCThWPSDYoLT_PO5a2WQAb
          

name: Build LedFx

on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      fversion:
       description: 'Frontend Version'
       default: '87'
       required: false
      portaudio:
       description: 'Build Portaudio | Sorry you need to write true to enable'
       default: 'No'
       required: false
       options:
         - 'Yes'
         - 'No'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -x {0}
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ['3.12.x']
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
        with:
          repository: LedFx/LedFx
          ref: main

      - uses: actions/checkout@v3
        name: Check out tools from GitHub
        with:
          repository: YeonV/LedFx-Builds
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          path: src2
      - name: Delete old frontend
        uses: JesseTG/rm@v1.0.3
        with:
          path: ./ledfx_frontend
      - name: get git version
        run: |        
          git rev-parse HEAD >> ledfx/git_version          
      - name: Get latest frontend
        run: |
          curl -L --max-redirs 10 -o ledfx_frontend_v2.zip "https://github.com/YeonV/LedFx-Frontend-v2/releases/latest/download/ledfx_frontend_v2.zip"
      - name: Include new frontend
        if: "!startsWith(matrix.OS, 'win')"  
        run: |
          cd ./ledfx_frontend_v2
          ls
          unzip -o -u ledfx_frontend_v2.zip
          cd ..
          cp -rf ./ledfx_frontend_v2/ledfx_frontend_v2 ./ledfx_frontend
          ls ./ledfx_frontend

      - name: Include new frontend win    
        if: "startsWith(matrix.OS, 'win')"
        run: |
          unzip ledfx_frontend_v2.zip
          cp -r ./ledfx_frontend_v2 ./ledfx_frontend
          ls ./ledfx_frontend
          
      - name: Bump version    
        if: "startsWith(matrix.OS, 'win')"  
        run: |
          cp ./src2/tools/win/version-bump2.ps1 ./
          ./version-bump2.ps1 ${{ github.event.inputs.fversion }}
        shell: pwsh

      - name: Bump version unix   
        if: "startsWith(matrix.OS, 'ubu')"  
        run: |
          sed -i 's/\bMICRO_VERSION = .*\b/MICRO_VERSION = ${{ github.event.inputs.fversion }}/' ./ledfx/consts.py
          
      - name: Bump version osx
        if: "!startsWith(matrix.OS, 'win') && !startsWith(matrix.OS, 'ubu')"  
        run: |
          brew install gnu-sed
          gsed -i 's/\bMICRO_VERSION = .*\b/MICRO_VERSION = ${{ github.event.inputs.fversion }}/' ./ledfx/consts.py

      #- name: Create Pull Request
      #  continue-on-error: true
      #  if: "startsWith(matrix.OS, 'win')"  
      #  uses: peter-evans/create-pull-request@v4
      #  with:
      #    path: ./src
      #    token: ${{ secrets.LEDFX_TOKEN }}
      #    delete-branch: true
      #    branch: new-frontend
      #    commit-message: "[new-frontend] v2.0.${{ github.event.inputs.fversion }}"
      #    title: Release v2.0.${{ github.event.inputs.fversion }}
      #    body: New version incoming!

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update Path for Windows
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Enable long paths for git on Windows

        # Enable handling long path names (+260 char) on the Windows platform
        # https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#maximum-path-length-limitation
        run: git config --system core.longpaths true

      - name: Configure poetry
        run: poetry config virtualenvs.create false

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
          echo "dir=$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-


      # - name: Set up cache
      #   uses: actions/cache@v3
      #   id: cache
      #   with:
      #     path: .venv
      #     key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      # - name: Ensure cache is healthy
      #   if: steps.cache.outputs.cache-hit == 'true'
      #   run: |
      #     # `timeout` is not available on macOS, so we define a custom function.
      #     [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

      #     # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
      #     timeout 10s poetry run pip --version || rm -rf .venv

      - name: Check lock file
        run: poetry check --lock

      - name: Build a binary wheel
        run: |
          poetry build

      - name: Install LedFx
        run: |
          poetry install
          poetry run pip install pyinstaller
          poetry env info

      - name: Get Backend Version
        id: getbackendver
        run: |
          echo "action_state=$(python3 consts.py | cut -d- -f1 | cut -d. -f1,2).${{ github.event.inputs.fversion }}" >> $GITHUB_ENV
          BINARY_NAME=LedFx_core-
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: Portaudio dependency for windows
        if: startsWith(runner.os, 'Windows') && github.event.inputs.portaudio == 'true'
        uses: msys2/setup-msys2@v2
#        shell: msys2 {0}
        with:
          msystem: MINGW64
          update: true
          install: |
              git
              zip
              unzip
              base-devel
              mingw-w64-x86_64-gcc
              mingw-w64-x86_64-cmake
              mingw-w64-x86_64-ninja

      - name: Build portaudio
        if: startsWith(runner.os, 'Windows') && github.event.inputs.portaudio == 'true'
        shell: msys2 {0}
        run: |
          export CYGPATH=$(cygpath -m /)
          git clone https://github.com/portaudio/portaudio
          cmake -B portaudio/.build -S portaudio -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} -DPA_BUILD_SHARED_LIBS=on -DCMAKE_BUILD_TYPE=Release -DPA_USE_ASIO=on
          cmake --build portaudio/.build/
          cmake --install portaudio/.build/
          rm -rf portaudio
          mv $CYGPATH/mingw64/bin/libportaudio.dll $pythonLocation/lib/site-packages/_sounddevice_data/portaudio-binaries/libportaudio64bit.dll

      - name: Build ${{ env.BINARY_NAME }} ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        run: |
          mv tools/hook-samplerate.py $pythonLocation/lib/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks/hook-samplerate.py
          pyinstaller win.spec
          mv dist/LedFx $BINARY_NAME-v$action_state
          7z.exe a -tzip $BINARY_NAME-v$action_state.zip $BINARY_NAME-v$action_state "-mx5" "-xr!.git" "-xr!.github"

      - name: Upload ${{ env.BINARY_NAME }} core ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}-v${{ env.action_state }}--win.zip
            path: ${{ env.BINARY_NAME }}-v${{ env.action_state }}--win.zip

      - name: Build ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        run: |
            cp src2/tools/win/yzwin.spec ./win-portable.spec
            pyinstaller win-portable.spec
            ls dist/
            mv dist/LedFx.exe dist/$BINARY_NAME-v$action_state--win-portable.exe


      - name: Upload ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}-v${{ env.action_state }}--win-portable.exe
            path: dist\${{ env.BINARY_NAME }}-v${{ env.action_state }}--win-portable.exe
